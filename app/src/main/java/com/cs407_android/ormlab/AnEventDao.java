package com.cs407_android.ormlab;

/**
 * Created by rkrul on 3/11/2016.
 */
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table EVENT.
 */
public class AnEventDao extends AbstractDao<AnEvent, Long> {

    public static final String TABLENAME = "EVENT";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Start = new Property(3, String.class, "start", false, "START");
        public final static Property End = new Property(4, String.class, "end", false, "END");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property Display = new Property(7, Boolean.class, "display", false, "DISPLAY");
    };


    public AnEventDao(DaoConfig config) {
        super(config);
    }

    public AnEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'EVENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'DATE' TEXT," + // 2: date
                "'START' TEXT," + // 3: start
                "'END' TEXT," + // 4: end
                "'LOCATION' TEXT," + // 5: location
                "'DESCRIPTION' TEXT," + // 6: description
                "'DISPLAY' INTEGER);"; // 7: display
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AnEvent entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }

        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(4, start);
        }

        String end = entity.getEnd();
        if (end != null) {
            stmt.bindString(5, end);
        }

        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }

        Boolean display = entity.getDisplay();
        if (display != null) {
            stmt.bindLong(8, display ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public AnEvent readEntity(Cursor cursor, int offset) {
        AnEvent entity = new AnEvent( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // start
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // end
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // display
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AnEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStart(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEnd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDisplay(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
    }

    @Override
    protected Long updateKeyAfterInsert(AnEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(AnEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}

